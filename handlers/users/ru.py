import types

from keyboards.default.ru_btn import *
from keyboards.inline.ru_btn import *
from aiogram.dispatcher import FSMContext
from data.config import *
from utils.databace import *
from .start import *


@dp.message_handler(text="–†—É—Å—Å–∫–∏–π üá∑üá∫", state=UserState.language)
async def set_uz_langugae(message: types.Message):
    await save_language(message.from_user.id, "ru")
    await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª üòä", reply_markup=channel_btn_ru)
    await UserState.channel_follow.set()


@dp.callback_query_handler(text="check_subscription_ru", state=UserState.channel_follow)
async def check_subscription_callback(call: types.CallbackQuery):
    is_subscribed = await check_subscription(call.message.chat.id)

    if is_subscribed:
        await call.message.delete()
        await call.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üìû", reply_markup=phone_number_ru)
        await UserState.phone_number_ru.set()
    else:
        await call.message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª üòä", reply_markup=channel_btn_ru)


@dp.message_handler(state=UserState.phone_number_ru, content_types=types.ContentType.CONTACT)
async def set_phone_number(message: types.Message, state: FSMContext):
    await save_user_data(message.from_user.id, message.contact.full_name, message.from_user.username,
                         message.contact.phone_number)
    await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å ‚úÖ", reply_markup=types.ReplyKeyboardRemove())
    await message.answer("–í—ã–±–∏—Ä–∞—Ç—å:", reply_markup=menu_btn_ru)
    await state.finish()


@dp.message_handler(text="–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å üìù")
async def set_tavsiya_qilmoq(message: types.Message):
    try:
        del fake_data[message.from_user.id]
    except:
        pass
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ü–µ–Ω—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å üì∏",
                         reply_markup=types.ReplyKeyboardRemove())
    await UserState.tavsiya_qilmoq_photo_ru.set()
    await record_stat(message.from_user.id)


@dp.message_handler(state=UserState.tavsiya_qilmoq_photo_ru, content_types=types.ContentType.PHOTO)
async def set_tavsiya_qilmoq_photo(message: types.Message, state: FSMContext):
    if message.from_user.id not in fake_data:
        fake_data[message.from_user.id] = {}
    fake_data[message.from_user.id]["photo_id"] = message.photo[-1].file_id
    await message.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –≤–∞–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. ‚úÖ")
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è üìù", reply_markup=types.ReplyKeyboardRemove())
    await UserState.tavsiya_qilmoq_text_ru.set()

@dp.message_handler(state=UserState.tavsiya_qilmoq_text_ru, content_types=types.ContentType.TEXT)
async def set_tavsiya_qilmoq_text_ru(message: types.Message, state: FSMContext):
    await message.answer("–í–∞—à–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ\n\n–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å!‚ò∫Ô∏è")
    user_data = await check_user(message.from_user.id)
    username = ""
    if user_data[3] == None:
        username = "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    else:
        username = user_data[3]
    caption = f"""
<code>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ üë§:</code>

<b>–ò–º—è:</b> {user_data[2]}
<b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> @{username}
<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> +{user_data[4]}

<b>{message.text}</b>
"""
    await bot.send_photo(chat_id=GROUP_ID, photo=fake_data[message.from_user.id]["photo_id"], caption=caption)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=menu_btn_ru)
    await state.finish()


